#include <iostream>
using namespace std;
bool queenispossible(int n, int board[11][11], int i, int j){
    for(int k=0; k<n; k++){
        if(board[k][j]==1){
            return false;
        }
    }
    //left diagonal and right diagonal
    int x = i;
    int y = j;
    //the queen only has other queens above it on left or right side
    // left diagonal
    while(x>=0 && y>=0){
        if(board[x][y]==1){
            return false;
        }
        x--;
        y--;
    }
    x=i;
    y=j;
    
    //right diagonal
    while(x>=0 && y>=0){
        if(board[x][y]==1){
            return false;
        }
        x--;
        y++;
    }
    return true;
}

bool countnqueen(int n, int board[11][11], int i, int &count){
    //base case
    if(i==n){
        // for(int a=0; a<n; a++){
        //     for(int b=0; b<n; b++){
        //         cout<<board[a][b]<<" ";
        //     }
        //     cout<<endl;
        // }
        // cout<<endl;
        count++;
        return false;
    }
    
    //rec case
    for(int j=0; j<n; j++){
        if(queenispossible(n, board, i, j)){
            board[i][j] = 1;
            bool queensplacedahead = countnqueen(n, board, i+1, count);
            if(queensplacedahead){
                return true;
            }
            board[i][j] = 0;
        }
    }
    
    return false;
}

int main() {
	// Count N-Queen
	int n;
	cin>>n;
	int board[11][11] = {0};
	int count = 0;
	countnqueen(n, board, 0, count);
	cout<<count;
	return 0;
}
