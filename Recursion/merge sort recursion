#include <iostream>
using namespace std;
void merge(int* arr, int s, int e){
    int mid = (s+e)/2;
    
    int i = s;
    int j = mid+1;
    int k = s;
    
    int temp[100];
    while(i<=mid and j<=e){
        if(arr[i]<arr[j]){
            temp[k++]=arr[i++]; 
        }
        else{
            temp[k++]=arr[j++];
        }
    }
    while(i<=mid){
        temp[k++]=arr[i++];
    }
    while(j<=e){
        temp[k++]=arr[j++];
    }
    
    //copying all elements to the orignal array
    for(int i=s; i<=e; i++){
        arr[i] = temp[i];
    }
}

void mergesort(int* arr, int s, int e){
    //base case - 1 or 0 elements
    if(s>=e){
        return;
    }
    //following 3 steps
    //1. devide
    int mid =(s+e)/2;
    
    //2. recursively sort the 2 arrays s-mid and mid-e;
    mergesort(arr, s, mid);
    mergesort(arr, mid+1, e);
    
    //3. merge the 2 parts
    merge(arr, s, e);
}
int main() {
	// merge sort recursion
	int n = 5;
	int arr[] = {5,4,3,2,1};
	mergesort(arr, 0, n-1);
	for(int i=0; i<n; i++){
	    cout<<arr[i]<<" ";
	}
	cout<<endl;
	return 0;
}
