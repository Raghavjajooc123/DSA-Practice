#include <iostream>
#include <bitset>
#include <vector>
using namespace std;

const int N = 10000000;
bitset<10000005> p;
vector<int> primes;

void prime_seive(){
    p.set();
    p[0]=p[1]=0;
    for(long long int i = 2; i<=N; i++){
        if(p[i]==1){
            primes.push_back(i);
            for(long long int j = i*i; j<=N; j+=i){
                p[j]=0;
            }
        }
    }
}
int main() {
  //segmented seive
    prime_seive();
    int t;
    cin>>t;
    for(int i=0;i<t;i++){
        int m,n;
        cin>>m>>n;
        bool segment[n-m+1];
        for(int i = 0; i<n-m+1; i++){
            segment[i]=0;
        }
        for(auto x:primes){
            if(x*x >n){
                break;
            }
            int start = (m/x)*x;
            if(x>=m && x<=n){
                start = x * 2;
            }
            for(int j = start; j<=n; j+=x){
                segment[j-m] = 1;
            }
        }
        for(int i = m; i<=n; i++){
            if(segment[i-m]==0 && i!=1){
                cout<<i<<endl;
            }
        }
        cout<<endl;
    }
    return 0;
}
