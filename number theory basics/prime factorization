#include <iostream>
#include <bitset>
#include <vector>
using namespace std;

const int N = 10000000;
bitset<10000005> p;
vector<int> primes;

void prime_seive(){
    p.set();
    p[0]=p[1]=0;
    for(long long int i = 2; i<=N; i++){
        if(p[i]==1){
            primes.push_back(i);
            for(long long int j = i*i; j<=N; j+=i){
                p[j]=0;
            }
        }
    }
}

vector<int> factorize(int m, vector<int> &primes){
    vector<int> factors;
    factors.clear();
    
    for(int i=0; i*i<m; i++){
        int prime = primes[i];
        if(m%prime == 0){
            factors.push_back(prime);
            while(m%prime == 0)
            m = m/prime;
        }
    }
    if(m!=1){
        factors.push_back(m);
    }
    
    return factors;
}
int main() {
	// space optimised sieve using bitset
    prime_seive();
    int t;
    cin>>t;
    for(int i=0;i<t;i++){
        int m;
        cin>>m;
        vector<int> factors = factorize(m, primes);
        for(auto f:factors){
            cout<<f<<" ";            
        }
        cout<<endl;
    }
    return 0;
}
